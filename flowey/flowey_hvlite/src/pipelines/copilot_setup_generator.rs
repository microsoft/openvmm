// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

use anyhow::Result;

/// Generate copilot-setup-steps.yml for GitHub Copilot Coding Agent
#[derive(clap::Args)]
pub struct CopilotSetupGeneratorCli {}

impl CopilotSetupGeneratorCli {
    pub fn run(self, repo_root: &std::path::Path) -> Result<()> {
        let output_file = repo_root.join("copilot-setup-steps.yml");

        let content = generate_copilot_setup_steps();

        std::fs::write(&output_file, content)?;

        println!("Generated copilot-setup-steps.yml");
        Ok(())
    }
}

fn generate_copilot_setup_steps() -> String {
    format!(
        r#"##############################
# THIS FILE IS AUTOGENERATED #
#    DO NOT MANUALLY EDIT    #
##############################
# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

# GitHub Copilot setup steps for OpenVMM development environment
# Generated by flowey_hvlite - DO NOT EDIT MANUALLY

steps:
  - name: Install Rust with required targets
    run: |
      # Install Rust using rustup (version managed by flowey)
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain {rust_version}
      source ~/.cargo/env
      
      # Install targets for the host architecture
      ARCH=$(uname -m)
      if [ "$ARCH" = "x86_64" ]; then
        rustup target add x86_64-unknown-linux-musl
      elif [ "$ARCH" = "aarch64" ]; then
        rustup target add aarch64-unknown-linux-musl
      fi

  - name: Install system dependencies
    run: |
      # Update package lists
      sudo apt-get update
      
      # Install build dependencies required for OpenVMM
      sudo apt-get install -y \
        binutils \
        build-essential \
        gcc-aarch64-linux-gnu \
        libssl-dev \
        pkg-config

  - name: Restore OpenVMM build dependencies
    run: |
      # Restore external dependencies required for building OpenVMM
      # This includes protoc (Protocol Buffers compiler), mu_msvm UEFI firmware, 
      # test Linux kernels, and other build artifacts
      cargo xflowey restore-packages
      
      # Install cargo-nextest for running unit tests (version managed by flowey)
      cargo install cargo-nextest --version {nextest_version} --locked
"#,
        rust_version = flowey_lib_hvlite::_jobs::cfg_versions::RUSTUP_TOOLCHAIN,
        nextest_version = flowey_lib_hvlite::_jobs::cfg_versions::NEXTEST
    )
}
